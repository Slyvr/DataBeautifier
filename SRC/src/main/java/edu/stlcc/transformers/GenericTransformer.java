package edu.stlcc.transformers;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import org.w3c.dom.Document;
import org.xml.sax.SAXException;

public class GenericTransformer implements TransformerInterface {

	private String xslFile;
	private String inputType;
	private String inputFile;
	private String outputFile;
	private String outputType;
	private boolean landscape;
	private String logFile;
	private String outputContent;
	
	public GenericTransformer() {
		
	}
	
	public GenericTransformer(String xslFile, String inputType, String outputType, String inputFile, String outputFile, boolean landscape, String logFile) {
		this.xslFile = xslFile;
		this.inputType = inputType;
		this.outputType = outputType;
		this.inputFile = inputFile;
		this.outputFile = outputFile;
		this.landscape = landscape;
		this.logFile = logFile;
	}
	
	@Override
	public void transform() {
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		//factory.setNamespaceAware(true);
		//factory.setValidating(true);
		
		try {
			File stylesheet = new File(this.getXslFile());
			File datafile = new File(this.getInputFile());
			
			writeFile(this.getLogFile(), "Transforming XML Starting\n", true);
			
			DocumentBuilder builder = factory.newDocumentBuilder();
			Document document = builder.parse(datafile);
			
			// Use a Transformer for output
			TransformerFactory tFactory = TransformerFactory.newInstance();
			StreamSource stylesource = new StreamSource(stylesheet);
			Transformer transformer = tFactory.newTransformer(stylesource);
			
			DOMSource source = new DOMSource(document);
			StringWriter writer = new StringWriter();
			StreamResult result = new StreamResult(writer);
			transformer.transform(source, result);
			String output = writer.toString();
			this.setOutputContent(output);
			
			writeFile(this.getLogFile(), "Transforming XML Complete\n", true);
		} catch (TransformerConfigurationException tce) {
			// Error generated by the parser
			System.out.println("\n** Transformer Factory error");
			System.out.println("   " + tce.getMessage());
			
			// Use the contained exception, if any
			Throwable x = tce;
			
			if (tce.getException() != null) {
				x = tce.getException();
			}
			
			x.printStackTrace();
			writeFile(this.getLogFile(), "TransformerConfigurationException: "+x.getMessage()+"\n", true);
		} catch (TransformerException te) {
			// Error generated by the parser
			System.out.println("\n** Transformation error");
			System.out.println("   " + te.getMessage());
			
			// Use the contained exception, if any
			Throwable x = te;
			
			if (te.getException() != null) {
				x = te.getException();
			}
		
			x.printStackTrace();
			writeFile(this.getLogFile(), "TransformerException: "+x.getMessage()+"\n", true);
		} catch (SAXException sxe) {
			// Error generated by this application
			// (or a parser-initialization error)
			Exception x = sxe;
			
			if (sxe.getException() != null) {
				x = sxe.getException();
			}
			
			x.printStackTrace();
			writeFile(this.getLogFile(), "SAXException: "+x.getMessage()+"\n", true);
		} catch (ParserConfigurationException pce) {
			// Parser with specified options can't be built
			pce.printStackTrace();
			writeFile(this.getLogFile(), "ParserConfigurationException: "+pce.getMessage()+"\n", true);
		} catch (Exception e) {
			//Error with PDF output
			e.printStackTrace();
			writeFile(this.getLogFile(), "Exception: "+e.getMessage()+"\n", true);
		}
	}
	
	@Override
	public void postTransformation() {
		//Write the generated string to a file of the specified type
		writeFile(this.getOutputFile(),this.getOutputContent(), false);
		
		writeFile(this.getLogFile(), "Transformed File Written\n", true);
	}

	@Override
	public void writeFile(String filename, String content, boolean append) {
		try{
			FileWriter fileWriter = new FileWriter(filename, append);
		    PrintWriter printWriter = new PrintWriter(fileWriter);
		    printWriter.print(content);
		    printWriter.close();
		}
		catch(IOException ex) {
			System.out.println("Write to file error occured for "+filename);
			ex.printStackTrace();
		}
	}

	@Override
	public String readFile(String filepath, Charset encoding) throws IOException {
		byte[] encoded = Files.readAllBytes(Paths.get(filepath));
		return new String(encoded, encoding);
	}

	
	public String getXslFile() {
		return xslFile;
	}

	public void setXslFile(String xslFile) {
		this.xslFile = xslFile;
	}

	public String getInputType() {
		return inputType;
	}

	public void setInputType(String inputType) {
		this.inputType = inputType;
	}

	public String getOutputType() {
		return outputType;
	}

	public void setOutputType(String outputType) {
		this.outputType = outputType;
	}

	public String getInputFile() {
		return inputFile;
	}

	public void setInputFile(String inputFile) {
		this.inputFile = inputFile;
	}

	public String getOutputFile() {
		return outputFile;
	}

	public void setOutputFile(String outputFile) {
		this.outputFile = outputFile;
	}

	public boolean isLandscape() {
		return landscape;
	}

	public void setLandscape(boolean landscape) {
		this.landscape = landscape;
	}

	public String getLogFile() {
		return logFile;
	}

	public void setLogFile(String logFile) {
		this.logFile = logFile;
	}

	public String getOutputContent() {
		return outputContent;
	}

	public void setOutputContent(String outputContent) {
		this.outputContent = outputContent;
	}

}
